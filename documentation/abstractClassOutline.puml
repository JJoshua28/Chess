@startuml Class dependencies setup

class MoveValidator {
  playerId: PlayerIdType
  currentPosition: BoardPosition
  boardPosition: BoardPosition
  movementType: MovementType
  canMoveLeft(): TileIdsType[]
  canMoveRight(): TileIdsType[]
  canMoveDown(): TileIdsType[]
  canMoveUp(): TileIdsType[]
  canMoveDownRight(): TileIdsType[]
  canMoveDownLeft(): TileIdsType[]
  canMoveUpRight(): TileIdsType[]
  canMoveUpLeft(): TileIdsType[]
  validateMove(): boolean
}

class Position {
  moveLeft(): RowIds | null
  moveRight(): RowIds | null
  moveDown(): ColumnIds | null
  moveUp(): ColumnIds | null
  moveDownRight(): BoardPosition | null
  moveDownLeft(): BoardPosition | null
  moveUpRight(): BoardPosition | null
  moveUpLeft(): BoardPosition | null
}

abstract class Piece {
    symbol: PieceSymbolType
    playerId: PlayerIdType
    type: Object
    startingPosition: TileIdsType
    hasMoved: boolean
    currentColumnPosition: ColumnIds
    currentRowPosition: RowIds
    selected: boolean
    getCurrentPosition(): TileIdsType
    setCurrentPosition(BoardPosition boardPosition): void
    getSymbol(): PieceSymbolType
    getSelectedStatus(): boolean
    getAvailableMoves(): TileIdsType[]

}



class Player {
  id: PlayerIdType
  activePieces: ActivePieces
  isThereTurn: boolean
  hasMoved: boolean
  unavailablePieces: PieceTemplate[]
  setIsThereTurn(boolean value): void
  getIsThereTurn(): boolean 
  setUnavailablePieces(PieceTemplate value): void
  getUnavailablePieces(): PieceTemplate[]
}

Player ..> Piece
Piece ..> Position 
Position ..> MoveValidator
@enduml